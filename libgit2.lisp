;;; Generated by Verrazano 0.5
;;; WARNING: This is a generated file, editing it is unwise!


(cl:in-package :cl-user)

(cl:defpackage :libgit2
  (:use :cffi)
  (:nicknames)
  (:export "GIT-INDEX-ENTRY-UNMERGED-NEW"
           "GIT-INDEX-ENTRY-UNMERGED-CONSTRUCTOR"
           "GIT-INDEX-ENTRY-UNMERGED-OPERATOR-="
           "GIT-TIME-NEW"
           "GIT-TIME-CONSTRUCTOR"
           "GIT-TIME-OPERATOR-="
           "GIT-REMOTE-HEAD-NEW"
           "GIT-REMOTE-HEAD-CONSTRUCTOR"
           "GIT-REMOTE-HEAD-OPERATOR-="
           "GIT-SIGNATURE-CONSTRUCTOR"
           "GIT-SIGNATURE-OPERATOR-="
           "GIT-INDEXER-STATS-NEW"
           "GIT-INDEXER-STATS-CONSTRUCTOR"
           "GIT-INDEXER-STATS-OPERATOR-="
           "GIT-CONFIG-FILE-NEW"
           "GIT-CONFIG-FILE-CONSTRUCTOR"
           "GIT-CONFIG-FILE-OPERATOR-="
           "GIT-INDEX-ENTRY-NEW"
           "GIT-INDEX-ENTRY-CONSTRUCTOR"
           "GIT-INDEX-ENTRY-OPERATOR-="
           "GIT-HEADARRAY-NEW"
           "GIT-HEADARRAY-CONSTRUCTOR"
           "GIT-HEADARRAY-OPERATOR-="
           "GIT-BRANCH-NEW"
           "GIT-BRANCH-CONSTRUCTOR"
           "GIT-BRANCH-OPERATOR-="
           ".-24-NEW"
           ".-24-CONSTRUCTOR"
           "GIT-INDEX-TIME-OPERATOR-="
           ".-20-NEW"
           ".-20-CONSTRUCTOR"
           "GIT-STRARRAY-OPERATOR-="
           "GIT-OBJECT-TYPEISLOOSE"
           "GIT-REFERENCE-CREATE-OID"
           "GIT-LIBGIT-2-VERSION"
           "GIT-TAG-ID"
           "GIT-TREEBUILDER-REMOVE"
           "GIT-REPOSITORY-DISCOVER"
           "GIT-OID-FROMSTRN"
           "GIT-BLOB-LOOKUP"
           "GIT-ODB-NEW"
           "GIT-OID-FROMSTR"
           "GIT-REPOSITORY-DATABASE"
           "GIT-TAG-MESSAGE"
           "GIT-REVWALK-SORTING"
           "GIT-REFERENCE-RENAME"
           "GIT-ODB-CLOSE"
           "GIT-REFLOG-ENTRYCOUNT"
           "GIT-REFERENCE-LISTALL"
           "GIT-REFSPEC-DST"
           "GIT-INDEX-ADD-2"
           "GIT-INDEX-GET-UNMERGED-BYINDEX"
           "GIT-CONFIG-NEW"
           "GIT-REFLOG-ENTRY-OIDNEW"
           "GIT-TAG-LOOKUP"
           "GIT-REFLOG-ENTRY-BYINDEX"
           "GIT-ODB-HASHFILE"
           "GIT-COMMIT-AUTHOR"
           "GIT-REVWALK-PUSH"
           "GIT-TREEBUILDER-CREATE"
           "GIT-STRERROR"
           "GIT-OBJECT-TYPE-2STRING"
           "GIT-COMMIT-MESSAGE"
           "GIT-COMMIT-LOOKUP-PREFIX"
           "GIT-COMMIT-TIME"
           "GIT-TREEBUILDER-INSERT"
           "GIT-CONFIG-GET-INT-64"
           "GIT-TRANSPORT-NEW"
           "GIT-TRANSPORT"
           "GIT-INDEX-UNIQ"
           "GIT-REFERENCE-OWNER"
           "GIT-CONFIG-GET-INT-32"
           "GIT-COMMIT-COMMITTER"
           "GIT-CONFIG-GET-BOOL"
           "GIT-REMOTE-DOWNLOAD"
           "GIT-REVWALK-NEXT"
           "GIT-REFERENCE-TARGET"
           "GIT-ODB-OBJECT-SIZE"
           "GIT-REPOSITORY-IS-BARE"
           "GIT-REFERENCE-OID"
           "GIT-ODB-ADD-BACKEND"
           "GIT-SIGNATURE-DUP"
           "GIT-CONFIG-SET-INT-64"
           "GIT-OBJECT-STRING-2TYPE"
           "GIT-INDEXER-NEW"
           "GIT-REFERENCE-RESOLVE"
           "GIT-OID-NCMP"
           "GIT-CONFIG-SET-INT-32"
           "INT-32-T"
           "GIT-INDEXER-FREE"
           "GIT-REPOSITORY-HEAD"
           "GIT-REPOSITORY-HEAD-DETACHED"
           "GIT-INDEX-ADD"
           "GIT-REFERENCE-CREATE-SYMBOLIC"
           "GIT-CONFIG-FOREACH"
           "GIT-STATUS-FILE"
           "GIT-TREE-ENTRY-NAME"
           "GIT-STRARRAY-FREE"
           "GIT-TAG-TAGGER"
           "GIT-OID-SHORTEN-NEW"
           "GIT-REPOSITORY-OPEN-3"
           "GIT-REPOSITORY-OPEN-2"
           "GIT-TREE-ENTRY-ATTRIBUTES"
           "GIT-OBJECT-OWNER"
           "GIT-TAG-NAME"
           "GIT-TAG-CREATE-LIGHTWEIGHT"
           "GIT-COMMIT-TIME-OFFSET"
           "GIT-INDEX-ENTRYCOUNT-UNMERGED"
           "GIT-REMOTE-NAME"
           "GIT-COMMIT-TREE"
           "GIT-OID-FROMRAW"
           "GIT-TREE-ID"
           "GIT-TAG-TARGET"
           "GIT-REPOSITORY-INIT"
           "GIT-ODB-READ-HEADER"
           "GIT-REFERENCE-TYPE"
           "GIT-REF-LISTALL"
           "GIT-REF-HAS-PEEL"
           "GIT-REF-PACKED"
           "GIT-REF-SYMBOLIC"
           "GIT-REF-OID"
           "GIT-REF-INVALID"
           "GIT-RTYPE"
           "GIT-REMOTE-UPDATE-TIPS"
           "GIT-REPOSITORY-IS-EMPTY"
           "GIT-REPOSITORY-PATH"
           "GIT-REPO-PATH-WORKDIR"
           "GIT-REPO-PATH-ODB"
           "GIT-REPO-PATH-INDEX"
           "GIT-REPO-PATH"
           "GIT-REPOSITORY-PATHID"
           "GIT-REPOSITORY-HEAD-ORPHAN"
           "GIT-TREE-ENTRY-BYNAME"
           "GIT-REVWALK-REPOSITORY"
           "GIT-INDEX-FREE"
           "GIT-TREE-ENTRY-BYINDEX"
           "GIT-REVWALK-NEW"
           "GIT-REMOTE-GET"
           "GIT-TAG-CLOSE"
           "GIT-INDEX-REMOVE"
           "GIT-STATUS-FOREACH"
           "GIT-TREE-LOOKUP"
           "GIT-ODB-OBJECT-TYPE"
           "GIT-SIGNATURE-NOW"
           "GIT-TAG-CREATE"
           "GIT-TREE-CLOSE"
           "GIT-ODB-OPEN-WSTREAM"
           "GIT-OID-PATHFMT"
           "GIT-REFLOG-FREE"
           "GIT-BLOB-RAWSIZE"
           "GIT-OID-SHORTEN-FREE"
           "GIT-REFLOG-WRITE"
           "GIT-TREEBUILDER-FILTER"
           "GIT-REFSPEC-TRANSFORM"
           "GIT-CONFIG-OPEN-ONDISK"
           "GIT-INDEX-GET-UNMERGED-BYPATH"
           "GIT-INDEX-ENTRY-UNMERGED"
           "GIT-COMMIT-CLOSE"
           "GIT-COMMIT-PARENTCOUNT"
           "GIT-COMMIT-LOOKUP"
           "GIT-ODB-HASH"
           "GIT-TREEBUILDER-GET"
           "GIT-ODB-EXISTS"
           "GIT-ODB-WRITE"
           "GIT-INDEX-CLEAR"
           "GIT-REMOTE-NEW"
           "GIT-INDEX-APPEND-2"
           "GIT-REVWALK-FREE"
           "GIT-BLOB-CREATE-FROMBUFFER"
           "GIT-TREEBUILDER-WRITE"
           "GIT-TREE-ENTRY-TYPE"
           "GIT-TREE-ENTRY-2OBJECT"
           "GIT-REMOTE-URL"
           "GIT-BLOB-LOOKUP-PREFIX"
           "GIT-TREE-LOOKUP-PREFIX"
           "GIT-ODB-READ-PREFIX"
           "GIT-REMOTE-FREE"
           "GIT-TAG-TYPE"
           "GIT-TREEBUILDER-FREE"
           "GIT-INDEXER-RUN"
           "PROCESSED"
           "TOTAL"
           "GIT-INDEXER-STATS"
           "GIT-CONFIG-FREE"
           "GIT-INDEX-GET"
           "GIT-LASTERROR"
           "GIT-CONFIG-GET-STRING"
           "GIT-TAG-TARGET-OID"
           "GIT-CONFIG-FIND-SYSTEM"
           "GIT-CONFIG-DELETE"
           "GIT-INDEX-APPEND"
           "GIT-OBJECT-ID"
           "GIT-REFLOG-ENTRY-MSG"
           "GIT-OID-CPY"
           "GIT-TREE-ENTRYCOUNT"
           "GIT-OBJECT-TYPE"
           "GIT-OID-CMP"
           "GIT-COMMIT-ID"
           "GIT-INDEX-FIND"
           "GIT-BLOB-RAWCONTENT"
           "GIT-REFERENCE-DELETE"
           "GIT-REVWALK-RESET"
           "GIT-REMOTE-NEGOTIATE"
           "GIT-TREEBUILDER-CLEAR"
           "GIT-TREE-CREATE-FROMINDEX"
           "GIT-INDEX-WRITE"
           "GIT-REMOTE-PUSHSPEC"
           "GIT-OID-TO-STRING"
           "GIT-TAG-LOOKUP-PREFIX"
           "GIT-TAG"
           "GIT-OID-ALLOCFMT"
           "GIT-REPOSITORY-OPEN"
           "GIT-INDEX-READ"
           "GIT-COMMIT-PARENT"
           "GIT-REFERENCE-FOREACH"
           "GIT-INDEXER-HASH"
           "GIT-REFERENCE-SET-TARGET"
           "GIT-ESHORTBUFFER"
           "GIT-ENOMATCH"
           "GIT-EPASSTHROUGH"
           "GIT-EAMBIGUOUSOIDPREFIX"
           "GIT-EOBJCORRUPTED"
           "GIT-EINVALIDARGS"
           "GIT-ESTREAM"
           "GIT-ENOTNUM"
           "GIT-EOVERFLOW"
           "GIT-EEXISTS"
           "GIT-ENOTIMPLEMENTED"
           "GIT-EINVALIDREFSTATE"
           "GIT-EREVWALKOVER"
           "GIT-EINVALIDPATH"
           "GIT-EPACKEDREFSCORRUPTED"
           "GIT-ETOONESTEDSYMREF"
           "GIT-EREFCORRUPTED"
           "GIT-EINVALIDREFNAME"
           "GIT-EBAREINDEX"
           "GIT-EBUSY"
           "GIT-EZLIB"
           "GIT-EFLOCKFAIL"
           "GIT-EPACKCORRUPTED"
           "GIT-EMISSINGOBJDATA"
           "GIT-EINVALIDTYPE"
           "GIT-ENOTAREPO"
           "GIT-EOBJTYPE"
           "GIT-EOSERR"
           "GIT-ENOMEM"
           "GIT-ENOTFOUND"
           "GIT-ENOTOID"
           "GIT-SUCCESS"
           "GIT-ERROR"
           "GIT-INDEXER-WRITE"
           "GIT-INDEXER"
           "GIT-SIGNATURE-NEW"
           "GIT-TREEBUILDER"
           "GIT-INDEX-OPEN"
           "GIT-BLOB-CLOSE"
           "GIT-ODB-ADD-ALTERNATE"
           "GIT-REFSPEC-SRC-MATCH"
           "GIT-OBJECT-SIZE"
           "GIT-SIGNATURE-FREE"
           "GIT-OBJECT-LOOKUP-PREFIX"
           "GIT-REVWALK-HIDE"
           "GIT-REFLOG-ENTRY-OIDOLD"
           "GIT-REFLOG-READ"
           "GIT-REFLOG"
           "GIT-OID-SHORTEN-ADD"
           "GIT-OID-SHORTEN"
           "GIT-REFERENCE-NAME"
           "GIT-CONFIG-ADD-FILE-ONDISK"
           "GIT-CLEARERROR"
           "GIT-REFERENCE-SET-OID"
           "GIT-CONFIG-FIND-GLOBAL"
           "GIT-CONFIG-ADD-FILE"
           "GIT-REPOSITORY-CONFIG-AUTOLOAD"
           "GIT-OID-FMT"
           "GIT-TAG-CREATE-FROMBUFFER"
           "GIT-OBJECT-LOOKUP"
           "GIT-OBJ-REF-DELTA"
           "GIT-OBJ-OFS-DELTA"
           "GIT-OBJ-EXT-2"
           "GIT-OBJ-TAG"
           "GIT-OBJ-BLOB"
           "GIT-OBJ-TREE"
           "GIT-OBJ-COMMIT"
           "GIT-OBJ-EXT-1"
           "GIT-OBJ-BAD"
           "GIT-OBJ-ANY"
           "GIT-OTYPE"
           "GIT-COMMIT-MESSAGE-ENCODING"
           "GIT-CONFIG-SET-BOOL"
           "GIT-COMMIT-PARENT-OID"
           "MERGE"
           "REMOTE"
           "GIT-BRANCH"
           "GIT-TAG-DELETE"
           "GIT-TREE-ENTRY-ID"
           "GIT-TREE-ENTRY"
           "GIT-TAG-LIST"
           "GIT-REPOSITORY-CONFIG"
           "GIT-REVWALK"
           "GIT-TRANSPORT-CB"
           "GIT-ODB-OBJECT-ID"
           "GIT-COMMIT-TREE-OID"
           "GIT-ODB-OPEN"
           "GIT-REPOSITORY-INDEX"
           "GIT-BLOB"
           "GIT-REFLOG-ENTRY-COMMITTER"
           "GIT-REFLOG-ENTRY"
           "GIT-REFERENCE-LOOKUP"
           "GIT-REFERENCE"
           "GIT-REFERENCE-PACKALL"
           "GIT-BLOB-CREATE-FROMFILE"
           "GIT-CONFIG-OPEN-GLOBAL"
           "GIT-ODB-OBJECT-DATA"
           "GIT-COMMIT-CREATE-V"
           "GIT-REMOTE-FETCHSPEC"
           "GIT-REMOTE-CONNECT"
           "GIT-REMOTE-LS"
           "HEADS"
           "LEN"
           "GIT-HEADARRAY"
           "LOID"
           "GIT-REMOTE-HEAD"
           "GIT-REMOTE"
           "GIT-CONFIG-FILE-ONDISK"
           "FOREACH"
           "SET"
           "GET"
           "OPEN"
           "CFG"
           "GIT-CONFIG-FILE"
           "GIT-CONFIG-SET-STRING"
           "GIT-CONFIG"
           "GIT-COMMIT-CREATE"
           "GIT-COMMIT"
           "GIT-TREE"
           "WHEN"
           "EMAIL"
           "NAME"
           "GIT-SIGNATURE"
           "OFFSET"
           "TIME"
           "GIT-TIME"
           "GIT-ODB-READ"
           "GIT-ODB-OPEN-RSTREAM"
           "FINALIZE-WRITE"
           "BACKEND"
           "GIT-ODB-STREAM"
           "FREE"
           "EXISTS"
           "READSTREAM"
           "WRITESTREAM"
           "WRITE"
           "READ-HEADER"
           "READ-PREFIX"
           "READ"
           "ODB"
           "GIT-ODB-BACKEND"
           "GIT-ODB"
           "GIT-REPOSITORY-FREE"
           "GIT-OBJECT-CLOSE"
           "GIT-OBJECT"
           "GIT-REFSPEC-SRC"
           "GIT-REFSPEC"
           "GIT-INDEX-ENTRYCOUNT"
           "GIT-INDEX"
           "GIT-ODB-OBJECT-CLOSE"
           "GIT-ODB-OBJECT"
           "GIT-INDEX-ENTRY-STAGE"
           "PATH"
           "FLAGS-EXTENDED"
           "FLAGS"
           "OID"
           "FILE-SIZE"
           "GID"
           "UID"
           "MODE"
           "INO"
           "DEV"
           "MTIME"
           "CTIME"
           "GIT-INDEX-ENTRY"
           "GIT-OID"
           "ID"
           "GIT-OFF-T"
           "NANOSECONDS"
           "SECONDS"
           "GIT-INDEX-TIME"
           "GIT-TIME-T"
           "INT-64-T"
           "GIT-TAG-LIST-MATCH"
           "GIT-REPOSITORY"
           "COUNT"
           "STRINGS"
           "GIT-STRARRAY"
           "SIZE-T"))

(cl:in-package :libgit2)

(cl:defun vtable-lookup (pobj indx coff)
  (cl:let ((vptr (cffi:mem-ref pobj :pointer coff)))
    (cffi:mem-aref vptr :pointer (cl:- indx 2))))

(cl:defmacro virtual-funcall (pobj indx coff cl:&body body)
  `(cffi:foreign-funcall-pointer (vtable-lookup ,pobj ,indx ,coff) ,cl:nil ,@body))

(cffi::defctype size-t :unsigned-long)

(cffi:defcstruct git-strarray
  (strings :pointer)
  (count size-t))

(cffi:defcstruct git-repository
  )

(cffi:defcfun ("git_tag_list_match" git-tag-list-match) :int (tag-names :pointer) (pattern :pointer)
                                                             (repo :pointer))

(cffi::defctype int-64-t :long)

(cffi::defctype git-time-t int-64-t)

(cffi:defcstruct git-index-time
  (seconds git-time-t)
  (nanoseconds :unsigned-int))

(cffi::defctype git-off-t int-64-t)

(cffi:defcstruct _git-oid
  (id :unsigned-char :count 20))

(cffi::defctype git-oid _git-oid)

(cffi:defcstruct git-index-entry
  (ctime git-index-time)
  (mtime git-index-time)
  (dev :unsigned-int)
  (ino :unsigned-int)
  (mode :unsigned-int)
  (uid :unsigned-int)
  (gid :unsigned-int)
  (file-size git-off-t)
  (oid git-oid)
  (flags :unsigned-short)
  (flags-extended :unsigned-short)
  (path (:pointer :char)))

(cffi:defcfun ("git_index_entry_stage" git-index-entry-stage) :int (entry :pointer))

(cffi:defcstruct git-odb-object
  )

(cffi:defcfun ("git_odb_object_close" git-odb-object-close) :void (object :pointer))

(cffi:defcstruct git-index
  )

(cffi:defcfun ("git_index_entrycount" git-index-entrycount) :unsigned-int (index :pointer))

(cffi:defcstruct git-refspec
  )

(cffi:defcfun ("git_refspec_src" git-refspec-src) :pointer (refspec :pointer))

(cffi:defcstruct git-object
  )

(cffi:defcfun ("git_object_close" git-object-close) :void (object :pointer))

(cffi:defcfun ("git_repository_free" git-repository-free) :void (repo :pointer))

(cffi:defcstruct git-odb
  )

(cffi:defcstruct git-odb-backend
  (odb :pointer)
  (read :pointer)
  (read-prefix :pointer)
  (read-header :pointer)
  (write :pointer)
  (writestream :pointer)
  (readstream :pointer)
  (exists :pointer)
  (free :pointer))

(cffi:defcstruct git-odb-stream
  (backend :pointer)
  (mode :int)
  (read :pointer)
  (write :pointer)
  (finalize-write :pointer)
  (free :pointer))

(cffi:defcfun ("git_odb_open_rstream" git-odb-open-rstream) :int (stream :pointer) (db :pointer)
                                                                 (oid :pointer))

(cffi:defcfun ("git_odb_read" git-odb-read) :int (out :pointer) (db :pointer) (id :pointer))

(cffi:defcstruct git-time
  (time git-time-t)
  (offset :int))

(cffi:defcstruct git-signature
  (name (:pointer :char))
  (email (:pointer :char))
  (when git-time))

(cffi:defcstruct git-tree
  )

(cffi:defcstruct git-commit
  )

(cffi:defcfun ("git_commit_create" git-commit-create) :int (oid :pointer) (repo :pointer)
                                                           (update-ref :pointer) (author :pointer)
                                                           (committer :pointer)
                                                           (message-encoding :pointer)
                                                           (message :pointer) (tree :pointer)
                                                           (parent-count :int) (parents :pointer))

(cffi:defcstruct git-config
  )

(cffi:defcfun ("git_config_set_string" git-config-set-string) :int (cfg :pointer) (name :pointer)
                                                                   (value :pointer))

(cffi:defcstruct git-config-file
  (cfg :pointer)
  (open :pointer)
  (get :pointer)
  (set :pointer)
  (foreach :pointer)
  (free :pointer))

(cffi:defcfun ("git_config_file__ondisk" git-config-file-ondisk) :int (out :pointer) (path :pointer))

(cffi:defcstruct git-remote
  )

(cffi:defcstruct git-remote-head
  ;;; Skipping field #<FIELD local> in #<STRUCT
                                         git_remote_head> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!

  ;;; Encountered a field while the previous bitfield typed fields do not add up to 32 or 64 bits. The fields offsets will be wrong in #<STRUCT
                                                                                                                                         git_remote_head>!
  (oid git-oid)
  (loid git-oid)
  (name (:pointer :char)))

(cffi:defcstruct git-headarray
  (len :unsigned-int)
  (heads :pointer))

(cffi:defcfun ("git_remote_ls" git-remote-ls) :int (remote :pointer) (refs :pointer))

(cffi:defcfun ("git_remote_connect" git-remote-connect) :int (remote :pointer) (direction :int))

(cffi:defcfun ("git_remote_fetchspec" git-remote-fetchspec) :pointer (remote :pointer))

(cffi:defcfun ("git_commit_create_v" git-commit-create-v) :int (oid :pointer) (repo :pointer)
                                                               (update-ref :pointer)
                                                               (author :pointer)
                                                               (committer :pointer)
                                                               (message-encoding :pointer)
                                                               (message :pointer) (tree :pointer)
                                                               (parent-count :int)common-lisp:&rest)

(cffi:defcfun ("git_odb_object_data" git-odb-object-data) :pointer (object :pointer))

(cffi:defcfun ("git_config_open_global" git-config-open-global) :int (out :pointer))

(cffi:defcfun ("git_blob_create_fromfile" git-blob-create-fromfile) :int (oid :pointer)
                                                                         (repo :pointer)
                                                                         (path :pointer))

(cffi:defcfun ("git_reference_packall" git-reference-packall) :int (repo :pointer))

(cffi:defcstruct git-reference
  )

(cffi:defcfun ("git_reference_lookup" git-reference-lookup) :int (reference-out :pointer)
                                                                 (repo :pointer) (name :pointer))

(cffi:defcstruct git-reflog-entry
  )

(cffi:defcfun ("git_reflog_entry_committer" git-reflog-entry-committer) :pointer (entry :pointer))

(cffi:defcstruct git-blob
  )

(cffi:defcfun ("git_repository_index" git-repository-index) :int (index :pointer) (repo :pointer))

(cffi:defcfun ("git_odb_open" git-odb-open) :int (out :pointer) (objects-dir :pointer))

(cffi:defcfun ("git_commit_tree_oid" git-commit-tree-oid) :pointer (commit :pointer))

(cffi:defcfun ("git_odb_object_id" git-odb-object-id) :pointer (object :pointer))

(cffi::defctype git-transport-cb :pointer)

(cffi:defcstruct git-revwalk
  )

(cffi:defcfun ("git_repository_config" git-repository-config) :int (out :pointer) (repo :pointer)
                                                                   (global-config-path :pointer)
                                                                   (system-config-path :pointer))

(cffi:defcfun ("git_tag_list" git-tag-list) :int (tag-names :pointer) (repo :pointer))

(cffi:defcstruct git-tree-entry
  )

(cffi:defcfun ("git_tree_entry_id" git-tree-entry-id) :pointer (entry :pointer))

(cffi:defcfun ("git_tag_delete" git-tag-delete) :int (repo :pointer) (tag-name :pointer))

(cffi:defcstruct git-branch
  (remote (:pointer :char))
  (merge (:pointer :char)))

(cffi:defcfun ("git_commit_parent_oid" git-commit-parent-oid) :pointer (commit :pointer)
                                                                       (n :unsigned-int))

(cffi:defcfun ("git_config_set_bool" git-config-set-bool) :int (cfg :pointer) (name :pointer)
                                                               (value :int))

(cffi:defcfun ("git_commit_message_encoding" git-commit-message-encoding) :pointer (commit :pointer))

(cffi:defcenum git-otype
  (:git-obj-any -2)
  (:git-obj-bad -1)
  (:git-obj-ext-1 0)
  (:git-obj-commit 1)
  (:git-obj-tree 2)
  (:git-obj-blob 3)
  (:git-obj-tag 4)
  (:git-obj-ext-2 5)
  (:git-obj-ofs-delta 6)
  (:git-obj-ref-delta 7))

(cffi:defcfun ("git_object_lookup" git-object-lookup) :int (object :pointer) (repo :pointer)
                                                           (id :pointer) (type git-otype))

(cffi:defcfun ("git_tag_create_frombuffer" git-tag-create-frombuffer) :int (oid :pointer)
                                                                           (repo :pointer)
                                                                           (buffer :pointer)
                                                                           (force :int))

(cffi:defcfun ("git_oid_fmt" git-oid-fmt) :void (str (:pointer :char)) (oid :pointer))

(cffi:defcfun ("git_repository_config_autoload" git-repository-config-autoload) :int (out :pointer)
                                                                                     (repo :pointer))

(cffi:defcfun ("git_config_add_file" git-config-add-file) :int (cfg :pointer) (file :pointer)
                                                               (priority :int))

(cffi:defcfun ("git_config_find_global" git-config-find-global) :int
                                                                     (global-config-path (:pointer :char)))

(cffi:defcfun ("git_reference_set_oid" git-reference-set-oid) :int (ref :pointer) (id :pointer))

(cffi:defcfun ("git_clearerror" git-clearerror) :void)

(cffi:defcfun ("git_config_add_file_ondisk" git-config-add-file-ondisk) :int (cfg :pointer)
                                                                             (path :pointer)
                                                                             (priority :int))

(cffi:defcfun ("git_reference_name" git-reference-name) :pointer (ref :pointer))

(cffi:defcstruct git-oid-shorten
  )

(cffi:defcfun ("git_oid_shorten_add" git-oid-shorten-add) :int (os :pointer) (text-oid :pointer))

(cffi:defcstruct git-reflog
  )

(cffi:defcfun ("git_reflog_read" git-reflog-read) :int (reflog :pointer) (ref :pointer))

(cffi:defcfun ("git_reflog_entry_oidold" git-reflog-entry-oidold) :pointer (entry :pointer))

(cffi:defcfun ("git_revwalk_hide" git-revwalk-hide) :int (walk :pointer) (oid :pointer))

(cffi:defcfun ("git_object_lookup_prefix" git-object-lookup-prefix) :int (object-out :pointer)
                                                                         (repo :pointer)
                                                                         (id :pointer)
                                                                         (len :unsigned-int)
                                                                         (type git-otype))

(cffi:defcfun ("git_signature_free" git-signature-free) :void (sig :pointer))

(cffi:defcfun ("git_object__size" git-object-size) size-t (type git-otype))

(cffi:defcfun ("git_refspec_src_match" git-refspec-src-match) :int (refspec :pointer)
                                                                   (refname :pointer))

(cffi:defcfun ("git_odb_add_alternate" git-odb-add-alternate) :int (odb :pointer) (backend :pointer)
                                                                   (priority :int))

(cffi:defcfun ("git_blob_close" git-blob-close) :void (blob :pointer))

(cffi:defcfun ("git_index_open" git-index-open) :int (index :pointer) (index-path :pointer))

(cffi:defcstruct git-treebuilder
  )

(cffi:defcfun ("git_signature_new" git-signature-new) :int (sig-out :pointer) (name :pointer)
                                                           (email :pointer) (time git-time-t)
                                                           (offset :int))

(cffi:defcstruct git-indexer
  )

(cffi:defcfun ("git_indexer_write" git-indexer-write) :int (idx :pointer))

(cffi:defcenum git-error
  (:git-success 0)
  (:git-error -1)
  (:git-enotoid -2)
  (:git-enotfound -3)
  (:git-enomem -4)
  (:git-eoserr -5)
  (:git-eobjtype -6)
  (:git-enotarepo -7)
  (:git-einvalidtype -8)
  (:git-emissingobjdata -9)
  (:git-epackcorrupted -10)
  (:git-eflockfail -11)
  (:git-ezlib -12)
  (:git-ebusy -13)
  (:git-ebareindex -14)
  (:git-einvalidrefname -15)
  (:git-erefcorrupted -16)
  (:git-etoonestedsymref -17)
  (:git-epackedrefscorrupted -18)
  (:git-einvalidpath -19)
  (:git-erevwalkover -20)
  (:git-einvalidrefstate -21)
  (:git-enotimplemented -22)
  (:git-eexists -23)
  (:git-eoverflow -24)
  (:git-enotnum -25)
  (:git-estream -26)
  (:git-einvalidargs -27)
  (:git-eobjcorrupted -28)
  (:git-eambiguousoidprefix -29)
  (:git-epassthrough -30)
  (:git-enomatch -31)
  (:git-eshortbuffer -32))

(cffi:defcfun ("git_reference_set_target" git-reference-set-target) :int (ref :pointer)
                                                                         (target :pointer))

(cffi:defcfun ("git_indexer_hash" git-indexer-hash) :pointer (idx :pointer))

(cffi:defcfun ("git_reference_foreach" git-reference-foreach) :int (repo :pointer)
                                                                   (list-flags :unsigned-int)
                                                                   (callback :pointer)
                                                                   (payload (:pointer :void)))

(cffi:defcfun ("git_commit_parent" git-commit-parent) :int (parent :pointer) (commit :pointer)
                                                           (n :unsigned-int))

(cffi:defcfun ("git_index_read" git-index-read) :int (index :pointer))

(cffi:defcfun ("git_repository_open" git-repository-open) :int (repository :pointer) (path :pointer))

(cffi:defcfun ("git_oid_allocfmt" git-oid-allocfmt) (:pointer :char) (oid :pointer))

(cffi:defcstruct git-tag
  )

(cffi:defcfun ("git_tag_lookup_prefix" git-tag-lookup-prefix) :int (tag :pointer) (repo :pointer)
                                                                   (id :pointer) (len :unsigned-int))

(cffi:defcfun ("git_oid_to_string" git-oid-to-string) (:pointer :char) (out (:pointer :char))
                                                                       (n size-t) (oid :pointer))

(cffi:defcfun ("git_remote_pushspec" git-remote-pushspec) :pointer (remote :pointer))

(cffi:defcfun ("git_index_write" git-index-write) :int (index :pointer))

(cffi:defcfun ("git_tree_create_fromindex" git-tree-create-fromindex) :int (oid :pointer)
                                                                           (index :pointer))

(cffi:defcfun ("git_treebuilder_clear" git-treebuilder-clear) :void (bld :pointer))

(cffi:defcfun ("git_remote_negotiate" git-remote-negotiate) :int (remote :pointer))

(cffi:defcfun ("git_revwalk_reset" git-revwalk-reset) :void (walker :pointer))

(cffi:defcfun ("git_reference_delete" git-reference-delete) :int (ref :pointer))

(cffi:defcfun ("git_blob_rawcontent" git-blob-rawcontent) :pointer (blob :pointer))

(cffi:defcfun ("git_index_find" git-index-find) :int (index :pointer) (path :pointer))

(cffi:defcfun ("git_commit_id" git-commit-id) :pointer (commit :pointer))

(cffi:defcfun ("git_oid_cmp" git-oid-cmp) :int (a :pointer) (b :pointer))

(cffi:defcfun ("git_object_type" git-object-type) git-otype (obj :pointer))

(cffi:defcfun ("git_tree_entrycount" git-tree-entrycount) :unsigned-int (tree :pointer))

(cffi:defcfun ("git_oid_cpy" git-oid-cpy) :void (out :pointer) (src :pointer))

(cffi:defcfun ("git_reflog_entry_msg" git-reflog-entry-msg) (:pointer :char) (entry :pointer))

(cffi:defcfun ("git_object_id" git-object-id) :pointer (obj :pointer))

(cffi:defcfun ("git_index_append" git-index-append) :int (index :pointer) (path :pointer)
                                                         (stage :int))

(cffi:defcfun ("git_config_delete" git-config-delete) :int (cfg :pointer) (name :pointer))

(cffi:defcfun ("git_config_find_system" git-config-find-system) :int
                                                                     (system-config-path (:pointer :char)))

(cffi:defcfun ("git_tag_target_oid" git-tag-target-oid) :pointer (tag :pointer))

(cffi:defcfun ("git_config_get_string" git-config-get-string) :int (cfg :pointer) (name :pointer)
                                                                   (out :pointer))

(cffi:defcfun ("git_lasterror" git-lasterror) :pointer)

(cffi:defcfun ("git_index_get" git-index-get) :pointer (index :pointer) (n :unsigned-int))

(cffi:defcfun ("git_config_free" git-config-free) :void (cfg :pointer))

(cffi:defcstruct git-indexer-stats
  (total :unsigned-int)
  (processed :unsigned-int))

(cffi:defcfun ("git_indexer_run" git-indexer-run) :int (idx :pointer) (stats :pointer))

(cffi:defcfun ("git_treebuilder_free" git-treebuilder-free) :void (bld :pointer))

(cffi:defcfun ("git_tag_type" git-tag-type) git-otype (tag :pointer))

(cffi:defcfun ("git_remote_free" git-remote-free) :void (remote :pointer))

(cffi:defcfun ("git_odb_read_prefix" git-odb-read-prefix) :int (out :pointer) (db :pointer)
                                                               (short-id :pointer)
                                                               (len :unsigned-int))

(cffi:defcfun ("git_tree_lookup_prefix" git-tree-lookup-prefix) :int (tree :pointer) (repo :pointer)
                                                                     (id :pointer)
                                                                     (len :unsigned-int))

(cffi:defcfun ("git_blob_lookup_prefix" git-blob-lookup-prefix) :int (blob :pointer) (repo :pointer)
                                                                     (id :pointer)
                                                                     (len :unsigned-int))

(cffi:defcfun ("git_remote_url" git-remote-url) :pointer (remote :pointer))

(cffi:defcfun ("git_tree_entry_2object" git-tree-entry-2object) :int (object-out :pointer)
                                                                     (repo :pointer)
                                                                     (entry :pointer))

(cffi:defcfun ("git_tree_entry_type" git-tree-entry-type) git-otype (entry :pointer))

(cffi:defcfun ("git_treebuilder_write" git-treebuilder-write) :int (oid :pointer) (repo :pointer)
                                                                   (bld :pointer))

(cffi:defcfun ("git_blob_create_frombuffer" git-blob-create-frombuffer) :int (oid :pointer)
                                                                             (repo :pointer)
                                                                             (buffer :pointer)
                                                                             (len size-t))

(cffi:defcfun ("git_revwalk_free" git-revwalk-free) :void (walk :pointer))

(cffi:defcfun ("git_index_append2" git-index-append-2) :int (index :pointer) (source-entry :pointer))

(cffi:defcfun ("git_remote_new" git-remote-new) :int (out :pointer) (repo :pointer) (url :pointer))

(cffi:defcfun ("git_index_clear" git-index-clear) :void (index :pointer))

(cffi:defcfun ("git_odb_write" git-odb-write) :int (oid :pointer) (odb :pointer) (data :pointer)
                                                   (len size-t) (type git-otype))

(cffi:defcfun ("git_odb_exists" git-odb-exists) :int (db :pointer) (id :pointer))

(cffi:defcfun ("git_treebuilder_get" git-treebuilder-get) :pointer (bld :pointer)
                                                                   (filename :pointer))

(cffi:defcfun ("git_odb_hash" git-odb-hash) :int (id :pointer) (data :pointer) (len size-t)
                                                 (type git-otype))

(cffi:defcfun ("git_commit_lookup" git-commit-lookup) :int (commit :pointer) (repo :pointer)
                                                           (id :pointer))

(cffi:defcfun ("git_commit_parentcount" git-commit-parentcount) :unsigned-int (commit :pointer))

(cffi:defcfun ("git_commit_close" git-commit-close) :void (commit :pointer))

(cffi:defcstruct git-index-entry-unmerged
  (mode :unsigned-int :count 3)
  (oid git-oid :count 3)
  (path (:pointer :char)))

(cffi:defcfun ("git_index_get_unmerged_bypath" git-index-get-unmerged-bypath) :pointer
                                                                                       (index :pointer)
                                                                                       (path :pointer))

(cffi:defcfun ("git_config_open_ondisk" git-config-open-ondisk) :int (cfg :pointer) (path :pointer))

(cffi:defcfun ("git_refspec_transform" git-refspec-transform) :int (out (:pointer :char))
                                                                   (outlen size-t) (spec :pointer)
                                                                   (name :pointer))

(cffi:defcfun ("git_treebuilder_filter" git-treebuilder-filter) :void (bld :pointer)
                                                                      (filter :pointer)
                                                                      (payload (:pointer :void)))

(cffi:defcfun ("git_reflog_write" git-reflog-write) :int (ref :pointer) (oid-old :pointer)
                                                         (committer :pointer) (msg :pointer))

(cffi:defcfun ("git_oid_shorten_free" git-oid-shorten-free) :void (os :pointer))

(cffi:defcfun ("git_blob_rawsize" git-blob-rawsize) size-t (blob :pointer))

(cffi:defcfun ("git_reflog_free" git-reflog-free) :void (reflog :pointer))

(cffi:defcfun ("git_oid_pathfmt" git-oid-pathfmt) :void (str (:pointer :char)) (oid :pointer))

(cffi:defcfun ("git_odb_open_wstream" git-odb-open-wstream) :int (stream :pointer) (db :pointer)
                                                                 (size size-t) (type git-otype))

(cffi:defcfun ("git_tree_close" git-tree-close) :void (tree :pointer))

(cffi:defcfun ("git_tag_create" git-tag-create) :int (oid :pointer) (repo :pointer)
                                                     (tag-name :pointer) (target :pointer)
                                                     (tagger :pointer) (message :pointer)
                                                     (force :int))

(cffi:defcfun ("git_signature_now" git-signature-now) :int (sig-out :pointer) (name :pointer)
                                                           (email :pointer))

(cffi:defcfun ("git_odb_object_type" git-odb-object-type) git-otype (object :pointer))

(cffi:defcfun ("git_tree_lookup" git-tree-lookup) :int (tree :pointer) (repo :pointer) (id :pointer))

(cffi:defcfun ("git_status_foreach" git-status-foreach) :int (repo :pointer) (callback :pointer)
                                                             (payload (:pointer :void)))

(cffi:defcfun ("git_index_remove" git-index-remove) :int (index :pointer) (position :int))

(cffi:defcfun ("git_tag_close" git-tag-close) :void (tag :pointer))

(cffi:defcfun ("git_remote_get" git-remote-get) :int (out :pointer) (cfg :pointer) (name :pointer))

(cffi:defcfun ("git_revwalk_new" git-revwalk-new) :int (walker :pointer) (repo :pointer))

(cffi:defcfun ("git_tree_entry_byindex" git-tree-entry-byindex) :pointer (tree :pointer)
                                                                         (idx :unsigned-int))

(cffi:defcfun ("git_index_free" git-index-free) :void (index :pointer))

(cffi:defcfun ("git_revwalk_repository" git-revwalk-repository) :pointer (walk :pointer))

(cffi:defcfun ("git_tree_entry_byname" git-tree-entry-byname) :pointer (tree :pointer)
                                                                       (filename :pointer))

(cffi:defcfun ("git_repository_head_orphan" git-repository-head-orphan) :int (repo :pointer))

(cffi:defcenum git-repository-pathid
  (:git-repo-path 0)
  (:git-repo-path-index 1)
  (:git-repo-path-odb 2)
  (:git-repo-path-workdir 3))

(cffi:defcfun ("git_repository_path" git-repository-path) :pointer (repo :pointer)
                                                                   (id git-repository-pathid))

(cffi:defcfun ("git_repository_is_empty" git-repository-is-empty) :int (repo :pointer))

(cffi:defcfun ("git_remote_update_tips" git-remote-update-tips) :int (remote :pointer))

(cffi:defcenum git-rtype
  (:git-ref-invalid 0)
  (:git-ref-oid 1)
  (:git-ref-symbolic 2)
  (:git-ref-packed 4)
  (:git-ref-has-peel 8)
  (:git-ref-listall 7))

(cffi:defcfun ("git_reference_type" git-reference-type) git-rtype (ref :pointer))

(cffi:defcfun ("git_odb_read_header" git-odb-read-header) :int (len-p :pointer) (type-p :pointer)
                                                               (db :pointer) (id :pointer))

(cffi:defcfun ("git_repository_init" git-repository-init) :int (repo-out :pointer) (path :pointer)
                                                               (is-bare :unsigned-int))

(cffi:defcfun ("git_tag_target" git-tag-target) :int (target :pointer) (tag :pointer))

(cffi:defcfun ("git_tree_id" git-tree-id) :pointer (tree :pointer))

(cffi:defcfun ("git_oid_fromraw" git-oid-fromraw) :void (out :pointer) (raw :pointer))

(cffi:defcfun ("git_commit_tree" git-commit-tree) :int (tree-out :pointer) (commit :pointer))

(cffi:defcfun ("git_remote_name" git-remote-name) :pointer (remote :pointer))

(cffi:defcfun ("git_index_entrycount_unmerged" git-index-entrycount-unmerged) :unsigned-int
                                                                                            (index :pointer))

(cffi:defcfun ("git_commit_time_offset" git-commit-time-offset) :int (commit :pointer))

(cffi:defcfun ("git_tag_create_lightweight" git-tag-create-lightweight) :int (oid :pointer)
                                                                             (repo :pointer)
                                                                             (tag-name :pointer)
                                                                             (target :pointer)
                                                                             (force :int))

(cffi:defcfun ("git_tag_name" git-tag-name) :pointer (tag :pointer))

(cffi:defcfun ("git_object_owner" git-object-owner) :pointer (obj :pointer))

(cffi:defcfun ("git_tree_entry_attributes" git-tree-entry-attributes) :unsigned-int (entry :pointer))

(cffi:defcfun ("git_repository_open2" git-repository-open-2) :int (repository :pointer)
                                                                  (git-dir :pointer)
                                                                  (git-object-directory :pointer)
                                                                  (git-index-file :pointer)
                                                                  (git-work-tree :pointer))

(cffi:defcfun ("git_repository_open3" git-repository-open-3) :int (repository :pointer)
                                                                  (git-dir :pointer)
                                                                  (object-database :pointer)
                                                                  (git-index-file :pointer)
                                                                  (git-work-tree :pointer))

(cffi:defcfun ("git_oid_shorten_new" git-oid-shorten-new) :pointer (min-length size-t))

(cffi:defcfun ("git_tag_tagger" git-tag-tagger) :pointer (tag :pointer))

(cffi:defcfun ("git_strarray_free" git-strarray-free) :void (array :pointer))

(cffi:defcfun ("git_tree_entry_name" git-tree-entry-name) :pointer (entry :pointer))

(cffi:defcfun ("git_status_file" git-status-file) :int (status-flags (:pointer :unsigned-int))
                                                       (repo :pointer) (path :pointer))

(cffi:defcfun ("git_config_foreach" git-config-foreach) :int (cfg :pointer) (callback :pointer)
                                                             (payload (:pointer :void)))

(cffi:defcfun ("git_reference_create_symbolic" git-reference-create-symbolic) :int
                                                                                   (ref-out :pointer)
                                                                                   (repo :pointer)
                                                                                   (name :pointer)
                                                                                   (target :pointer)
                                                                                   (force :int))

(cffi:defcfun ("git_index_add" git-index-add) :int (index :pointer) (path :pointer) (stage :int))

(cffi:defcfun ("git_repository_head_detached" git-repository-head-detached) :int (repo :pointer))

(cffi:defcfun ("git_repository_head" git-repository-head) :int (head-out :pointer) (repo :pointer))

(cffi:defcfun ("git_indexer_free" git-indexer-free) :void (idx :pointer))

(cffi::defctype int-32-t :int)

(cffi:defcfun ("git_config_set_int32" git-config-set-int-32) :int (cfg :pointer) (name :pointer)
                                                                  (value int-32-t))

(cffi:defcfun ("git_oid_ncmp" git-oid-ncmp) :int (a :pointer) (b :pointer) (len :unsigned-int))

(cffi:defcfun ("git_reference_resolve" git-reference-resolve) :int (resolved-ref :pointer)
                                                                   (ref :pointer))

(cffi:defcfun ("git_indexer_new" git-indexer-new) :int (out :pointer) (packname :pointer))

(cffi:defcfun ("git_object_string2type" git-object-string-2type) git-otype (str :pointer))

(cffi:defcfun ("git_config_set_int64" git-config-set-int-64) :int (cfg :pointer) (name :pointer)
                                                                  (value int-64-t))

(cffi:defcfun ("git_signature_dup" git-signature-dup) :pointer (sig :pointer))

(cffi:defcfun ("git_odb_add_backend" git-odb-add-backend) :int (odb :pointer) (backend :pointer)
                                                               (priority :int))

(cffi:defcfun ("git_reference_oid" git-reference-oid) :pointer (ref :pointer))

(cffi:defcfun ("git_repository_is_bare" git-repository-is-bare) :int (repo :pointer))

(cffi:defcfun ("git_odb_object_size" git-odb-object-size) size-t (object :pointer))

(cffi:defcfun ("git_reference_target" git-reference-target) :pointer (ref :pointer))

(cffi:defcfun ("git_revwalk_next" git-revwalk-next) :int (oid :pointer) (walk :pointer))

(cffi:defcfun ("git_remote_download" git-remote-download) :int (filename :pointer) (remote :pointer))

(cffi:defcfun ("git_config_get_bool" git-config-get-bool) :int (cfg :pointer) (name :pointer)
                                                               (out (:pointer :int)))

(cffi:defcfun ("git_commit_committer" git-commit-committer) :pointer (commit :pointer))

(cffi:defcfun ("git_config_get_int32" git-config-get-int-32) :int (cfg :pointer) (name :pointer)
                                                                  (out :pointer))

(cffi:defcfun ("git_reference_owner" git-reference-owner) :pointer (ref :pointer))

(cffi:defcfun ("git_index_uniq" git-index-uniq) :void (index :pointer))

(cffi:defcstruct git-transport
  )

(cffi:defcfun ("git_transport_new" git-transport-new) :int (transport :pointer) (url :pointer))

(cffi:defcfun ("git_config_get_int64" git-config-get-int-64) :int (cfg :pointer) (name :pointer)
                                                                  (out :pointer))

(cffi:defcfun ("git_treebuilder_insert" git-treebuilder-insert) :int (entry-out :pointer)
                                                                     (bld :pointer)
                                                                     (filename :pointer)
                                                                     (id :pointer)
                                                                     (attributes :unsigned-int))

(cffi:defcfun ("git_commit_time" git-commit-time) git-time-t (commit :pointer))

(cffi:defcfun ("git_commit_lookup_prefix" git-commit-lookup-prefix) :int (commit :pointer)
                                                                         (repo :pointer)
                                                                         (id :pointer)
                                                                         (len :unsigned-int))

(cffi:defcfun ("git_commit_message" git-commit-message) :pointer (commit :pointer))

(cffi:defcfun ("git_object_type2string" git-object-type-2string) :pointer (type git-otype))

(cffi:defcfun ("git_strerror" git-strerror) :pointer (num :int))

(cffi:defcfun ("git_treebuilder_create" git-treebuilder-create) :int (builder-p :pointer)
                                                                     (source :pointer))

(cffi:defcfun ("git_revwalk_push" git-revwalk-push) :int (walk :pointer) (oid :pointer))

(cffi:defcfun ("git_commit_author" git-commit-author) :pointer (commit :pointer))

(cffi:defcfun ("git_odb_hashfile" git-odb-hashfile) :int (out :pointer) (path :pointer)
                                                         (type git-otype))

(cffi:defcfun ("git_reflog_entry_byindex" git-reflog-entry-byindex) :pointer (reflog :pointer)
                                                                             (idx :unsigned-int))

(cffi:defcfun ("git_tag_lookup" git-tag-lookup) :int (tag :pointer) (repo :pointer) (id :pointer))

(cffi:defcfun ("git_reflog_entry_oidnew" git-reflog-entry-oidnew) :pointer (entry :pointer))

(cffi:defcfun ("git_config_new" git-config-new) :int (out :pointer))

(cffi:defcfun ("git_index_get_unmerged_byindex" git-index-get-unmerged-byindex) :pointer
                                                                                         (index :pointer)
                                                                                         (n :unsigned-int))

(cffi:defcfun ("git_index_add2" git-index-add-2) :int (index :pointer) (source-entry :pointer))

(cffi:defcfun ("git_refspec_dst" git-refspec-dst) :pointer (refspec :pointer))

(cffi:defcfun ("git_reference_listall" git-reference-listall) :int (array :pointer) (repo :pointer)
                                                                   (list-flags :unsigned-int))

(cffi:defcfun ("git_reflog_entrycount" git-reflog-entrycount) :unsigned-int (reflog :pointer))

(cffi:defcfun ("git_odb_close" git-odb-close) :void (db :pointer))

(cffi:defcfun ("git_reference_rename" git-reference-rename) :int (ref :pointer) (new-name :pointer)
                                                                 (force :int))

(cffi:defcfun ("git_revwalk_sorting" git-revwalk-sorting) :void (walk :pointer)
                                                                (sort-mode :unsigned-int))

(cffi:defcfun ("git_tag_message" git-tag-message) :pointer (tag :pointer))

(cffi:defcfun ("git_repository_database" git-repository-database) :pointer (repo :pointer))

(cffi:defcfun ("git_oid_fromstr" git-oid-fromstr) :int (out :pointer) (str :pointer))

(cffi:defcfun ("git_odb_new" git-odb-new) :int (out :pointer))

(cffi:defcfun ("git_blob_lookup" git-blob-lookup) :int (blob :pointer) (repo :pointer) (id :pointer))

(cffi:defcfun ("git_oid_fromstrn" git-oid-fromstrn) :int (out :pointer) (str :pointer)
                                                         (length size-t))

(cffi:defcfun ("git_repository_discover" git-repository-discover) :int
                                                                       (repository-path (:pointer :char))
                                                                       (size size-t)
                                                                       (start-path :pointer)
                                                                       (across-fs :int)
                                                                       (ceiling-dirs :pointer))

(cffi:defcfun ("git_treebuilder_remove" git-treebuilder-remove) :int (bld :pointer)
                                                                     (filename :pointer))

(cffi:defcfun ("git_tag_id" git-tag-id) :pointer (tag :pointer))

(cffi:defcfun ("git_libgit2_version" git-libgit-2-version) :void (major (:pointer :int))
                                                                 (minor (:pointer :int))
                                                                 (rev (:pointer :int)))

(cffi:defcfun ("git_reference_create_oid" git-reference-create-oid) :int (ref-out :pointer)
                                                                         (repo :pointer)
                                                                         (name :pointer)
                                                                         (id :pointer) (force :int))

(cffi:defcfun ("git_object_typeisloose" git-object-typeisloose) :int (type git-otype))

(cffi:defcfun ("_ZN12git_strarrayaSERKS_" git-strarray-operator-=) git-strarray (this :pointer)
                                                                                (arg1 git-strarray))

(cffi:defcfun ("_ZN12git_strarrayC1ERKS_" .-20-constructor) :void (this :pointer)
                                                                  (arg1 git-strarray))

(cl:defun .-20-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-strarray)))
    (.-20-constructor instance)
    instance))

(cffi:defcfun ("_ZN12git_strarrayC1Ev" .-20-constructor) :void (this :pointer))

(cl:defun .-20-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-strarray)))
    (.-20-constructor instance)
    instance))

(cffi:defcfun ("_ZN14git_index_timeaSERKS_" git-index-time-operator-=) git-index-time (this :pointer)
                                                                                      (arg1 git-index-time))

(cffi:defcfun ("_ZN14git_index_timeC1ERKS_" .-24-constructor) :void (this :pointer)
                                                                    (arg1 git-index-time))

(cl:defun .-24-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-index-time)))
    (.-24-constructor instance)
    instance))

(cffi:defcfun ("_ZN14git_index_timeC1Ev" .-24-constructor) :void (this :pointer))

(cl:defun .-24-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-index-time)))
    (.-24-constructor instance)
    instance))

(cffi:defcfun ("_ZN10git_branchaSERKS_" git-branch-operator-=) git-branch (this :pointer)
                                                                          (arg1 git-branch))

(cffi:defcfun ("_ZN10git_branchC1ERKS_" git-branch-constructor) :void (this :pointer)
                                                                      (arg1 git-branch))

(cl:defun git-branch-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-branch)))
    (git-branch-constructor instance)
    instance))

(cffi:defcfun ("_ZN10git_branchC1Ev" git-branch-constructor) :void (this :pointer))

(cl:defun git-branch-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-branch)))
    (git-branch-constructor instance)
    instance))

(cffi:defcfun ("_ZN13git_headarrayaSERKS_" git-headarray-operator-=) git-headarray (this :pointer)
                                                                                   (arg1 git-headarray))

(cffi:defcfun ("_ZN13git_headarrayC1ERKS_" git-headarray-constructor) :void (this :pointer)
                                                                            (arg1 git-headarray))

(cl:defun git-headarray-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-headarray)))
    (git-headarray-constructor instance)
    instance))

(cffi:defcfun ("_ZN13git_headarrayC1Ev" git-headarray-constructor) :void (this :pointer))

(cl:defun git-headarray-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-headarray)))
    (git-headarray-constructor instance)
    instance))

(cffi:defcfun ("_ZN15git_index_entryaSERKS_" git-index-entry-operator-=) git-index-entry (this :pointer)
                                                                                         (arg1 git-index-entry))

(cffi:defcfun ("_ZN15git_index_entryC1ERKS_" git-index-entry-constructor) :void (this :pointer)
                                                                                (arg1 git-index-entry))

(cl:defun git-index-entry-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-index-entry)))
    (git-index-entry-constructor instance)
    instance))

(cffi:defcfun ("_ZN15git_index_entryC1Ev" git-index-entry-constructor) :void (this :pointer))

(cl:defun git-index-entry-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-index-entry)))
    (git-index-entry-constructor instance)
    instance))

(cffi:defcfun ("_ZN15git_config_fileaSERKS_" git-config-file-operator-=) git-config-file (this :pointer)
                                                                                         (arg1 git-config-file))

(cffi:defcfun ("_ZN15git_config_fileC1ERKS_" git-config-file-constructor) :void (this :pointer)
                                                                                (arg1 git-config-file))

(cl:defun git-config-file-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-config-file)))
    (git-config-file-constructor instance)
    instance))

(cffi:defcfun ("_ZN15git_config_fileC1Ev" git-config-file-constructor) :void (this :pointer))

(cl:defun git-config-file-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-config-file)))
    (git-config-file-constructor instance)
    instance))

(cffi:defcfun ("_ZN8_git_oidaSERKS_" _git-oid-operator-=) _git-oid (this :pointer) (arg1 _git-oid))

(cffi:defcfun ("_ZN8_git_oidC1ERKS_" _git-oid-constructor) :void (this :pointer) (arg1 _git-oid))

(cl:defun _git-oid-new ()
  (cl:let ((instance (cffi:foreign-alloc '_git-oid)))
    (_git-oid-constructor instance)
    instance))

(cffi:defcfun ("_ZN8_git_oidC1Ev" _git-oid-constructor) :void (this :pointer))

(cl:defun _git-oid-new ()
  (cl:let ((instance (cffi:foreign-alloc '_git-oid)))
    (_git-oid-constructor instance)
    instance))

(cffi:defcfun ("_ZN17git_indexer_statsaSERKS_" git-indexer-stats-operator-=) git-indexer-stats (this :pointer)
                                                                                               (arg1 git-indexer-stats))

(cffi:defcfun ("_ZN17git_indexer_statsC1ERKS_" git-indexer-stats-constructor) :void (this :pointer)
                                                                                    (arg1 git-indexer-stats))

(cl:defun git-indexer-stats-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-indexer-stats)))
    (git-indexer-stats-constructor instance)
    instance))

(cffi:defcfun ("_ZN17git_indexer_statsC1Ev" git-indexer-stats-constructor) :void (this :pointer))

(cl:defun git-indexer-stats-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-indexer-stats)))
    (git-indexer-stats-constructor instance)
    instance))

(cffi:defcfun ("_ZN13git_signatureaSERKS_" git-signature-operator-=) git-signature (this :pointer)
                                                                                   (arg1 git-signature))

(cffi:defcfun ("_ZN13git_signatureC1ERKS_" git-signature-constructor) :void (this :pointer)
                                                                            (arg1 git-signature))

(cl:defun git-signature-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-signature)))
    (git-signature-constructor instance)
    instance))

(cffi:defcfun ("_ZN13git_signatureC1Ev" git-signature-constructor) :void (this :pointer))

(cl:defun git-signature-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-signature)))
    (git-signature-constructor instance)
    instance))

(cffi:defcfun ("_ZN15git_remote_headaSERKS_" git-remote-head-operator-=) git-remote-head (this :pointer)
                                                                                         (arg1 git-remote-head))

(cffi:defcfun ("_ZN15git_remote_headC1ERKS_" git-remote-head-constructor) :void (this :pointer)
                                                                                (arg1 git-remote-head))

(cl:defun git-remote-head-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-remote-head)))
    (git-remote-head-constructor instance)
    instance))

(cffi:defcfun ("_ZN15git_remote_headC1Ev" git-remote-head-constructor) :void (this :pointer))

(cl:defun git-remote-head-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-remote-head)))
    (git-remote-head-constructor instance)
    instance))

(cffi:defcfun ("_ZN8git_timeaSERKS_" git-time-operator-=) git-time (this :pointer) (arg1 git-time))

(cffi:defcfun ("_ZN8git_timeC1ERKS_" git-time-constructor) :void (this :pointer) (arg1 git-time))

(cl:defun git-time-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-time)))
    (git-time-constructor instance)
    instance))

(cffi:defcfun ("_ZN8git_timeC1Ev" git-time-constructor) :void (this :pointer))

(cl:defun git-time-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-time)))
    (git-time-constructor instance)
    instance))

(cffi:defcfun ("_ZN24git_index_entry_unmergedaSERKS_" git-index-entry-unmerged-operator-=) git-index-entry-unmerged (this :pointer)
                                                                                                                    (arg1 git-index-entry-unmerged))

(cffi:defcfun ("_ZN24git_index_entry_unmergedC1ERKS_" git-index-entry-unmerged-constructor) :void (this :pointer)
                                                                                                  (arg1 git-index-entry-unmerged))

(cl:defun git-index-entry-unmerged-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-index-entry-unmerged)))
    (git-index-entry-unmerged-constructor instance)
    instance))

(cffi:defcfun ("_ZN24git_index_entry_unmergedC1Ev" git-index-entry-unmerged-constructor) :void (this :pointer))

(cl:defun git-index-entry-unmerged-new ()
  (cl:let ((instance (cffi:foreign-alloc 'git-index-entry-unmerged)))
    (git-index-entry-unmerged-constructor instance)
    instance))
